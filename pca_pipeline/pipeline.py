import os
import luigi
from luigi.postgres import PostgresQuery
from datetime import date
from psycopg2.extensions import register_adapter
from utils import PSQLConn,create_num_flows_for_feature_table,create_pca_input_table,find_principal_components,extract_large_pca_components
from utils import QuotedIdentifier
from utils import initialize_user_defined_functions

cred = PSQLConn(os.getenv("GPDB_DATABASE"),
                os.getenv("GPDB_USER"),
                os.getenv("GPDB_PASSWORD"),
                os.getenv("GPDB_HOST"),
                os.getenv("GPDB_PORT")
                )

register_adapter(QuotedIdentifier, lambda x: x)

class DatabaseConfig(luigi.Config):
    base_table=luigi.Parameter()
    feature_input_table=luigi.Parameter()
    pca_input_base_table=luigi.Parameter()
    pca_output_base_table=luigi.Parameter()
    outlier_base_table=luigi.Parameter()

class ModelConfig(luigi.Config):
    user_col=luigi.Parameter()
    time_id_col=luigi.Parameter()
    name_id_col=luigi.Parameter()
    val_col=luigi.Parameter()
    percentage_val=luigi.FloatParameter()
    threshold = luigi.FloatParameter()

#some default params
TARGET_PATH=os.path.join(os.path.dirname(__file__),'target/{feature}_{date}'.format(
                feature=ModelConfig().user_col,
                date=date.today())
                )

#config classes
class PathConfig(luigi.Config):
    target_path=luigi.Parameter(default=TARGET_PATH)

def table_names_dict(id):
        pca_tables = {
        'hour':id,
        'pca_input':DatabaseConfig().pca_input_base_table+'_{}'.format(id),
        'pca_output':DatabaseConfig().pca_output_base_table+'_{}'.format(id),
        'outlier_output':DatabaseConfig().outlier_base_table+'_{}'.format(id)
        }
        return pca_tables

#tasks
class InitializeUserDefinedFunctions(luigi.Task):
    """Define user defined functions"""
    date = luigi.DateParameter()

    def run(self):
        conn = cred.connect()
        with conn.cursor() as curs:
            curs.execute(initialize_user_defined_functions())

        with self.output().open('w') as out_file:
            out_file.write("successfully created functions")

    def output(self):
        return luigi.LocalTarget(os.path.join(TARGET_PATH,"initialize_user_defined_functions"))

class CreateNumFlowsForFeatureTable(luigi.Task):
    """
    Task to compute required feature for each each feature column over each (day of week, hour of day) time periods
    """
    date = luigi.DateParameter()

    def requires(self):
        return [InitializeUserDefinedFunctions(date=self.date)]

    def run(self):
        conn = cred.connect()
        create_num_flows_for_feature_table(conn,
                                    input_table=DatabaseConfig().base_table,
                                    output_table=DatabaseConfig().feature_input_table,
                                    user_column=ModelConfig().user_col
                                    )
        with conn.cursor() as curs:
            query = curs.mogrify("SELECT * FROM %s LIMIT 1",(QuotedIdentifier(DatabaseConfig().feature_input_table),))
            curs.execute(query)
            rows = curs.fetchall()

        with self.output().open('w') as out_file:
            for row in rows:
                out_file.write(str(row))

    def output(self):
        return luigi.LocalTarget(os.path.join(TARGET_PATH,'create_num_flows_for_feature_table'))

class CreatePCAInputTable(luigi.Task):
    """
    Task to create a PCA input table for data with of given feature_col and (day of week, hour of day) pair from the NumFlowsForFeatureTable
    """
    date = luigi.DateParameter()
    hour_id = luigi.IntParameter()

    def requires(self):
        return [CreateNumFlowsForFeatureTable(date=self.date)]

    def run(self):
        conn = cred.connect()
        output_table = table_names_dict(self.hour_id)['pca_input']
        create_pca_input_table(conn,
                input_table=DatabaseConfig().feature_input_table,
                output_table=output_table,
                user_column=ModelConfig().user_col,
                id=self.hour_id
            )

        with conn.cursor() as curs:
            query = curs.mogrify("SELECT * FROM %s LIMIT 1",(QuotedIdentifier(output_table),))
            curs.execute(query)
            rows = curs.fetchall()

        with self.output().open('w') as out_file:
            for row in rows:
                out_file.write(str(row))

    def output(self):
        return luigi.LocalTarget(os.path.join(TARGET_PATH,"pca_input_table_for_hour_{}".format(self.hour_id)))


class RunPCATask(luigi.Task):
    """
    Task to run PCA on tables PCA input tables generated by CreatePCAInputTable task
    """
    date = luigi.DateParameter()
    hour_id = luigi.IntParameter()

    def requires(self):
        return [CreatePCAInputTable(date=self.date,hour_id=self.hour_id)]

    def run(self):
        conn = cred.connect()
        tables = table_names_dict(self.hour_id)
        input_table = tables['pca_input']
        output_table = tables['pca_output']
        find_principal_components(conn,
                                    input_table=input_table,
                                    output_table=output_table,
                                    time_id_col=ModelConfig().time_id_col,
                                    name_id_col=ModelConfig().name_id_col,
                                    val_col=ModelConfig().val_col,
                                    percentage_val=ModelConfig().percentage_val
                                )

        with conn.cursor() as curs:
            query = curs.mogrify("SELECT COUNT(*) FROM %s LIMIT 1",(QuotedIdentifier(output_table),))
            curs.execute(query)
            rows = curs.fetchall()

        with self.output().open('w') as out_file:
            for row in rows:
                out_file.write(str(row))

    def output(self):
        return luigi.LocalTarget(os.path.join(TARGET_PATH,"pca_output_table_for_hour_{}".format(self.hour_id)))

class ComputeOutlierFeaturesFromPCA(luigi.Task):
    """
    Task to compute outlier features by looking at entries in principal components with value above a given threshold
    """
    date = luigi.DateParameter()
    hour_id = luigi.IntParameter()

    def requires(self):
        return [RunPCATask(date=self.date,hour_id=self.hour_id)]

    def run(self):
        conn = cred.connect()
        tables = table_names_dict(self.hour_id)
        pca_input_table = tables['pca_input']
        pca_table = tables['pca_output']
        output_table = tables['outlier_output']
        extract_large_pca_components(conn,
                                        output_table=output_table,
                                        base_feature_table=pca_input_table,
                                        pca_table=pca_table,
                                        user_column=ModelConfig().user_col,
                                        threshold=ModelConfig().threshold
                                    )
        with conn.cursor() as curs:
            query = curs.mogrify("SELECT * FROM %s ORDER BY outlier_score DESC LIMIT 100",(QuotedIdentifier(output_table),))
            curs.execute(query)
            rows = curs.fetchall()

        with self.output().open('w') as out_file:
            for row in rows:
                out_file.write(str(row))

    def output(self):
        return luigi.LocalTarget(os.path.join(
            TARGET_PATH,
            "outliers/pca_outliers_hour_{hour}_threshold_{threshold}".format(hour=self.hour_id,threshold=ModelConfig().threshold)
            ))

#pipeline classes
class PipelineTask(luigi.WrapperTask):
    """Wrap up all the tasks for the pipeline into a single task
    So we can run this pipeline by calling this dummy task"""
    date = luigi.DateParameter(default=date.today())
    def requires(self):
        base_tasks = [
                InitializeUserDefinedFunctions(date=self.date),
                CreateNumFlowsForFeatureTable(date=self.date)
                ]
        
        ids = list(range(0,24))

        pca_input_tasks = [CreatePCAInputTable(date=self.date,hour_id=id) for id in ids]
        pca_output_tasks = [RunPCATask(date=self.date,hour_id=id) for id in ids]
        outlier_tasks = [ComputeOutlierFeaturesFromPCA(date=self.date,hour_id=id) for id in ids]
        tasks = base_tasks + pca_input_tasks + pca_output_tasks + outlier_tasks
        return tasks

    def run(self):
        with self.output().open('w') as out_file:
            out_file.write("successly ran pipeline on {}".format(self.date))

    def output(self):
        return luigi.LocalTarget(os.path.join(TARGET_PATH,"dummy"))
